package com.kandanafd.kfd_medi.DataControl;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.kandanafd.kfd_medi.Models.OrdFreeIssue;
import com.kandanafd.kfd_medi.Settings.DatabaseHelper;

import java.util.ArrayList;

/**
 * Created by Sathiyaraja on 6/20/2018.
 */

public class OrdFreeIssueDS {
    private SQLiteDatabase dB;
    private DatabaseHelper dbHelper;
    Context context;
    private String TAG="swadeshi";


    public OrdFreeIssueDS (Context context){
        this.context = context;
        dbHelper = new DatabaseHelper(context);
    }

    public void open() throws SQLException {
        dB = dbHelper.getWritableDatabase();
    }

/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

    public void UpdateOrderFreeIssue(OrdFreeIssue ordFreeIssue) {

		/* Remove record using order discount ref no & item code */
        RemoveFreeIssueRecord(ordFreeIssue.getOrdFreeIssue_RefNo(), ordFreeIssue.getOrdFreeIssue_ItemCode());

        if (dB == null) {
            open();
        } else if (!dB.isOpen()) {
            open();
        }

        try {

            ContentValues values = new ContentValues();

            values.put(DatabaseHelper.FORDFREEISS_REFNO, ordFreeIssue.getOrdFreeIssue_RefNo());
            values.put(DatabaseHelper.FORDFREEISS_TXNDATE, ordFreeIssue.getOrdFreeIssue_TxnDate());
            values.put(DatabaseHelper.FORDFREEISS_REFNO1, ordFreeIssue.getOrdFreeIssue_RefNo1());
            values.put(DatabaseHelper.FORDFREEISS_ITEMCODE, ordFreeIssue.getOrdFreeIssue_ItemCode());
            values.put(DatabaseHelper.FORDFREEISS_QTY, ordFreeIssue.getOrdFreeIssue_Qty());

            dB.insert(DatabaseHelper.TABLE_FORDFREEISS, null, values);
        } catch (Exception e) {
            Log.v(TAG + " Exception", e.toString());
        } finally {

            dB.close();
        }

    }

	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

    public void RemoveFreeIssueRecord(String RefNo, String ItemCode) {

        int count;
        if (dB == null) {
            open();
        } else if (!dB.isOpen()) {
            open();
        }
        Cursor cursor = null;

        try {

            cursor = dB.rawQuery("SELECT * FROM " + DatabaseHelper.TABLE_FORDFREEISS + " WHERE " + DatabaseHelper.FORDFREEISS_REFNO + " = '" + RefNo + "' AND " + DatabaseHelper.FORDFREEISS_ITEMCODE + " = '" + ItemCode + "'", null);
            count = cursor.getCount();
            if (count > 0) {
                dB.delete(DatabaseHelper.TABLE_FORDFREEISS, DatabaseHelper.FORDFREEISS_REFNO + " = '" + RefNo + "' AND " + DatabaseHelper.FORDFREEISS_ITEMCODE + " = '" + ItemCode + "'", null);
            }

        } catch (Exception e) {
            Log.v(TAG + " Exception", e.toString());
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            dB.close();
        }

    }

	/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/


    public ArrayList<OrdFreeIssue> getAllUnSync(String refno) {
        if (dB == null) {
            open();
        } else if (!dB.isOpen()) {
            open();
        }

        ArrayList<OrdFreeIssue> list = new ArrayList<OrdFreeIssue>();

        String selectQuery = "select * from " + dbHelper.TABLE_FORDFREEISS + " WHERE " + dbHelper.FORDFREEISS_REFNO1 + "='" + refno + "'";

        Cursor cursor = dB.rawQuery(selectQuery, null);

        try {
            while (cursor.moveToNext()) {

                OrdFreeIssue ordfreeIss = new OrdFreeIssue();

                ordfreeIss.setOrdFreeIssue_ItemCode(cursor.getString(cursor.getColumnIndex(dbHelper.FORDFREEISS_ITEMCODE)));
                ordfreeIss.setOrdFreeIssue_Qty(cursor.getString(cursor.getColumnIndex(dbHelper.FORDFREEISS_QTY)));
                ordfreeIss.setOrdFreeIssue_RefNo(cursor.getString(cursor.getColumnIndex(dbHelper.FORDFREEISS_REFNO)));
                ordfreeIss.setOrdFreeIssue_RefNo1(cursor.getString(cursor.getColumnIndex(dbHelper.FORDFREEISS_REFNO1)));
                ordfreeIss.setOrdFreeIssue_TxnDate(cursor.getString(cursor.getColumnIndex(dbHelper.FORDFREEISS_TXNDATE)));


                list.add(ordfreeIss);

            }
        } catch (Exception e) {

            Log.v(TAG + " Exception", e.toString());

        } finally {
            if (cursor != null) {
                cursor.close();
            }
            dB.close();
        }

        return list;
    }


    @SuppressWarnings("static-access")
    public int DeleteOldOrders(String DateFrom, String DateTo) {

        int count = 0;

        if (dB == null) {
            open();
        } else if (!dB.isOpen()) {
            open();
        }
        Cursor cursor = null;

        try {

            String selectQuery = "SELECT * FROM " + dbHelper.TABLE_FORDFREEISS + " WHERE " + dbHelper.FORDFREEISS_TXNDATE + " BETWEEN '"+ DateFrom + "' AND '" + DateTo + "'";
            cursor = dB.rawQuery(selectQuery, null);
            int cn = cursor.getCount();

            if (cn > 0) {
                int success = dB.delete(dbHelper.TABLE_FORDFREEISS, dbHelper.FORDFREEISS_TXNDATE + " BETWEEN '"+ DateFrom + "' AND '" + DateTo + "'", null);
                Log.v("Success", success + "");
            }

        } catch (Exception e) {
            Log.v(TAG + " Exception", e.toString());
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            dB.close();
        }
        return count;

    }
}
