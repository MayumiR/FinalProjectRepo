package com.kandanafd.kfd_medi.Sales;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.v4.app.Fragment;
import android.support.v7.app.AlertDialog;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListView;
import android.widget.SearchView;
import android.widget.SearchView.OnQueryTextListener;
import android.widget.Toast;

import com.kandanafd.kfd_medi.Adapter.AlertBox;
import com.kandanafd.kfd_medi.Adapter.CustomerAdapter;
import com.kandanafd.kfd_medi.DataControl.DebtorDS;
import com.kandanafd.kfd_medi.DataControl.FrepDaloDS;
import com.kandanafd.kfd_medi.DataControl.OrdHedDS;
import com.kandanafd.kfd_medi.DataControl.RouteDS;
import com.kandanafd.kfd_medi.DataControl.SalRepDS;
import com.kandanafd.kfd_medi.DefView.Home;
import com.kandanafd.kfd_medi.Models.Debtor;
import com.kandanafd.kfd_medi.Models.OrdHed;
import com.kandanafd.kfd_medi.R;
import com.kandanafd.kfd_medi.Settings.ReferenceNum;
import com.kandanafd.kfd_medi.Settings.SharedPreferencesClass;

import java.util.ArrayList;


public class FragmentSalesManagementPreSalesCustomer extends Fragment implements OnClickListener {
    View view;
    ListView lvCustomers;

    ArrayList<Debtor> customerList;
    private DebtorDS dsDebtorDS;
    Debtor debtor;
    CustomerAdapter customerAdapter;
    Button allCust, routeCust;

    // Shared Preferences variables
    public static final String SETTINGS = "SETTINGS";
    public static SharedPreferences localSP;

    boolean isRouteWise = false;

    @SuppressWarnings("deprecation")
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.sales_management_pre_sales_customer, container, false);

        setHasOptionsMenu(true);

        allCust = (Button) view.findViewById(R.id.all_cust);
        routeCust = (Button) view.findViewById(R.id.route_wise_cust);
        lvCustomers = (ListView) view.findViewById(R.id.cus_lv);

        allCust.setOnClickListener(this);
        routeCust.setOnClickListener(this);

        changeButtonRouteCustomerOnPress();
        restButtonAllCustomerOnRelease();

//		SetTitleAdapter adapter = new SetTitleAdapter();
//		adapter.createCutomActionBarTitle("Customer", getActivity());

        Home activity = (Home) getActivity();

        localSP = activity.getSharedPreferences(SETTINGS, Context.MODE_WORLD_READABLE + Context.MODE_WORLD_WRITEABLE);

        ReferenceNum referenceNum = new ReferenceNum(getActivity());
        // orderNo.setText(referenceNum.getCurrentRefNo("EXPR"));
        OrdHedDS hedDS = new OrdHedDS(getActivity());
        ArrayList<OrdHed> getOrdHed = hedDS.getAllActiveOrdHed(referenceNum.getCurrentRefNo(getResources().getString(R.string.NumVal)));

        if (!getOrdHed.isEmpty()) {

            for (OrdHed ordHed : getOrdHed) {

                if (activity.selectedDebtor == null) {
                    DebtorDS debtorDS = new DebtorDS(getActivity());
                    activity.selectedDebtor = debtorDS.getSelectedCustomerByCode(ordHed.getFORDHED_DEB_CODE());
                    activity.cusPosition = Integer.parseInt(localSP.getString("Cus_Position", "0").toString());
                }
            }

        }

        isRouteWise = true;

        RouteDS ds = new RouteDS(getActivity());
        lvCustomers = (ListView) view.findViewById(R.id.cus_lv);
        lvCustomers.clearTextFilter();
        dsDebtorDS = new DebtorDS(getActivity());
        customerList = dsDebtorDS.getRouteCustomers(ds.getRouteCodeByRoute(localSP.getString("Current_Route", "").toString()));
//        lvCustomers.setAdapter(new CustomerAdapter(getActivity(), customerList));

        if (activity.selectedDebtor != null) {
            lvCustomers.setSelection(activity.cusPosition);
        }

        lvCustomers.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
            @Override
            public void onItemClick(AdapterView<?> parent, View view2, int position, long id) {
                Home activity = (Home) getActivity();
                SalRepDS ds = new SalRepDS(getActivity());

                debtor = customerList.get(position);
                String debcode = debtor.getFDEBTOR_CODE().toString();

                boolean allowselect = new FrepDaloDS(getActivity()).getCheckAllowDebtor(debcode, ds.getCurrentRepCode());

                int i = android.provider.Settings.Global.getInt(getActivity().getContentResolver(), android.provider.Settings.Global.AUTO_TIME, 0);
                if (i > 0) {
                    if (allowselect) {  //check rep allocation customer only.................

                        if (debtor.getFDEBTOR_STATUS().equals("B")) {
                            android.widget.Toast.makeText(getActivity(), "Black Listed Customer", android.widget.Toast.LENGTH_LONG).show();
                            getActivity().getActionBar().setSelectedNavigationItem(0);
                        } else {
                            activity.selectedDebtor = debtor;
                            String DebStat = debtor.getFDEBTOR_STATUS();
                            SharedPreferencesClass.setLocalSharedPreference(activity, "Cus_Position", position + "");
                            Toast.makeText(getActivity(), debtor.getFDEBTOR_NAME() + " selected", Toast.LENGTH_SHORT).show();
                            getActivity().getActionBar().setSelectedNavigationItem(1);

                        }


                    } else {
                        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(getActivity());
                        alertDialogBuilder.setTitle("Access Denied");
                        alertDialogBuilder.setMessage("Access Denied for this Customer :" + debtor.getFDEBTOR_NAME());

                        alertDialogBuilder.setIcon(android.R.drawable.ic_dialog_alert);
                        alertDialogBuilder
                                .setCancelable(true);

                        AlertDialog alertD = alertDialogBuilder.create();
                        alertD.show();
                        //  android.widget.Toast.makeText(getActivity(), "Access Denied", android.widget.Toast.LENGTH_LONG).show();
                    }


                    //old code comment by dhanushika
            /*
                    if (debtor.getFDEBTOR_STATUS().equals("B")) {
						android.widget.Toast.makeText(getActivity(), "Black Listed Customer", android.widget.Toast.LENGTH_LONG).show();
						getActivity().getActionBar().setSelectedNavigationItem(0);
					} else {
						activity.selectedDebtor = debtor;
						// activity.cusPosition=position;
						String DebStat = debtor.getFDEBTOR_STATUS();

						// if (DebStat.equals("I")) {
						// toast.createToastMessage(debtor.getFDEBTOR_NAME() + "
						// is Blocked", getActivity());
						// } else {
						SharedPreferencesClass.setLocalSharedPreference(activity, "Cus_Position", position + "");
						// Toast.makeText(getActivity(),
						// debtor.getFDEBTOR_NAME() + " selected",
						// Toast.LENGTH_SHORT).show();
						toast.createToastMessage(debtor.getFDEBTOR_NAME() + " selected", getActivity());
						getActivity().getActionBar().setSelectedNavigationItem(1);
						// }
					}
					*/
                } else {
                    android.widget.Toast.makeText(getActivity(), "Please tick the 'Automatic Date and Time' option to continue..", android.widget.Toast.LENGTH_LONG).show();
					/* Show Date/time settings dialog */
                    startActivityForResult(new Intent(android.provider.Settings.ACTION_DATE_SETTINGS), 0);
                }
            }
        });

        lvCustomers.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {

            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                // TODO Auto-generated method stub
                Home activity = (Home) getActivity();
                debtor = customerList.get(position);
                if (debtor.getFDEBTOR_STATUS().equals("B")) {
                    android.widget.Toast.makeText(getActivity(), "Black Listed Customer", android.widget.Toast.LENGTH_LONG).show();
                    getActivity().getActionBar().setSelectedNavigationItem(0);
                } else {
                    activity.selectedDebtor = debtor;
                    AlertBox alertBox = new AlertBox();
                    alertBox.debtorDetailsDialogbox(getActivity(), debtor.getFDEBTOR_NAME(), debtor);
                }
                return false;
            }
        });

        //load all customers oncreate
        loadAllCustomers("all");

        return view;
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        for (int i = 0; i < menu.size(); ++i) {
            menu.removeItem(menu.getItem(i).getItemId());
        }

        menu.clear();

        inflater.inflate(R.menu.frag_customer_phone_menu, menu);
        SearchView searchView = (SearchView) menu.findItem(R.id.action_customer_search_phone).getActionView();
        searchView.setOnQueryTextListener(new OnQueryTextListener() {

            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {

                if (isRouteWise) {

                    RouteDS ds = new RouteDS(getActivity());
                    lvCustomers = (ListView) view.findViewById(R.id.cus_lv);
                    lvCustomers.clearTextFilter();
                    dsDebtorDS = new DebtorDS(getActivity());
                    customerList = dsDebtorDS.getRouteCustomersByCodeAndName(ds.getRouteCodeByRoute(localSP.getString("Current_Route", "").toString()), newText);
//                    lvCustomers.setAdapter(new CustomerAdapter(getActivity(), customerList));

                } else {

                    lvCustomers = (ListView) view.findViewById(R.id.cus_lv);
                    lvCustomers.clearTextFilter();
                    dsDebtorDS = new DebtorDS(getActivity());
                    customerList = dsDebtorDS.getCustomerByCodeAndName(newText);
//                    lvCustomers.setAdapter(new CustomerAdapter(getActivity(), customerList));

                }
                return false;
            }
        });
        super.onCreateOptionsMenu(menu, inflater);
    }

    private void changeButtonAllCustomerOnPress() {
        allCust.setBackgroundColor(Color.parseColor("#525252"));
    }

    private void restButtonAllCustomerOnRelease() {
        allCust.setBackgroundColor(Color.parseColor("#525252"));
    }

    private void changeButtonRouteCustomerOnPress() {
        routeCust.setBackgroundColor(Color.parseColor("#9c9c9c"));
    }

    private void restButtonRouteCustomerOnPress() {
        routeCust.setBackgroundColor(Color.parseColor("#9c9c9c"));
    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
        switch (v.getId()) {
            case R.id.all_cust: {
                // change button color
                changeButtonAllCustomerOnPress();
                restButtonRouteCustomerOnPress();

                isRouteWise = false;

                // fetch the all debtor
                loadAllCustomers("all");

                // toast.createToastMessage("All Debtor", getActivity());
            }
            break;

            case R.id.route_wise_cust: {
                // change button color
                changeButtonRouteCustomerOnPress();
                restButtonAllCustomerOnRelease();

                isRouteWise = true;

                // fetch the routewise debtor
                loadAllCustomers("route");

                // toast.createToastMessage("Route Wise Debtor", getActivity());
            }
            break;
            default:
                break;
        }
    }

    public void loadAllCustomers(String cmd) {


        lvCustomers.clearTextFilter();
        new LoadCustomers().execute(cmd);

    }

    public class LoadCustomers extends AsyncTask<String, String, String> {
        ProgressDialog pd = new ProgressDialog(getActivity());

        @Override
        protected String doInBackground(String... strings) {

            String cmd = strings[0];
            dsDebtorDS = new DebtorDS(getActivity());
            dsDebtorDS = new DebtorDS(getActivity());
            RouteDS ds = new RouteDS(getActivity());
            //customerList.clear();

            if(cmd.equalsIgnoreCase("all")){
                customerList = dsDebtorDS.getAllCustomers();
            }else if(cmd.equalsIgnoreCase("route")){
                customerList = dsDebtorDS.getRouteCustomers(ds.getRouteCodeByRoute(localSP.getString("Current_Route", "").toString()));
            }



            return null;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

            pd.setMessage("Loading Customers..");
            pd.show();

        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);

//            customerAdapter = new CustomerAdapter(getActivity(), customerList);
            lvCustomers.setAdapter(customerAdapter);

            if(customerList.size() ==0){
                lvCustomers.setEmptyView(view.findViewById(android.R.id.empty));
            }

            pd.dismiss();
        }
    }

}
