package com.kandanafd.kfd_medi.DataControl;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import com.kandanafd.kfd_medi.Models.ItemLoc;
import com.kandanafd.kfd_medi.Settings.DatabaseHelper;

import java.util.ArrayList;

public class ItemLocDS {

	private SQLiteDatabase dB;
	private DatabaseHelper dbHelper;
	Context context;
	private String TAG = "swadeshi";

	public ItemLocDS(Context context) {
		this.context = context;
		dbHelper = new DatabaseHelper(context);
	}

	public void open() throws SQLException {
		dB = dbHelper.getWritableDatabase();
	}

	@SuppressWarnings("static-access")
	public int UpdateFitemLoc(String LocCode, String ItemCode, String updCurQOH) {
		int updStatus = 0;

		ContentValues valueslocupd = new ContentValues();

		if (dB == null) {
			open();
		} else if (!dB.isOpen()) {
			open();
		}
		Cursor updcursor = null;

		try {

			String selectQuery = "SELECT * FROM " + dbHelper.TABLE_FITEMLOC + " WHERE " + dbHelper.FITEMLOC_ITEM_CODE + " = '" + ItemCode + "' AND " + dbHelper.FITEMLOC_LOC_CODE + " = '" + LocCode + "' ";
			updcursor = dB.rawQuery(selectQuery, null);

			int count = updcursor.getCount();

			valueslocupd.put(dbHelper.FITEMLOC_QOH, updCurQOH);

			if (count > 0) {
				updStatus = dB.update(dbHelper.TABLE_FITEMLOC, valueslocupd, dbHelper.FITEMLOC_LOC_CODE + " = '" + LocCode + "' AND " + dbHelper.FITEMLOC_ITEM_CODE + " = '" + ItemCode + "'", null);
			} else {
				updStatus = 0;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

		return updStatus;
	}

	@SuppressWarnings("static-access")
	public int createOrUpdateItemLoc(ArrayList<ItemLoc> list) {

		int serverdbID = 0;

		if (dB == null) {
			open();
		} else if (!dB.isOpen()) {
			open();
		}
		

		try {

			dB.beginTransaction();

			String sql = "Insert or Replace into " + dbHelper.TABLE_FITEMLOC + " (" + dbHelper.FITEMLOC_ITEM_CODE + ", " + dbHelper.FITEMLOC_LOC_CODE + ", " + dbHelper.FITEMLOC_QOH + ") values(?,?,?)";
			
			SQLiteStatement insert = dB.compileStatement(sql);
			
			for (ItemLoc loc : list) {
				
				insert.bindString(1, loc.getFITEMLOC_ITEM_CODE());
				insert.bindString(2, loc.getFITEMLOC_LOC_CODE());
				insert.bindString(3, loc.getFITEMLOC_QOH());
				insert.execute();
				
				serverdbID = 1;
			}
			
			dB.setTransactionSuccessful();
			
		} catch (Exception e) {

			Log.v(TAG + " Exception", e.toString());

		} finally {
			dB.endTransaction();
			dB.close();
		}
		return serverdbID;

	}

	@SuppressWarnings("static-access")
	public ArrayList<ItemLoc> getAllItemLoc() {
		if (dB == null) {
			open();
		} else if (!dB.isOpen()) {
			open();
		}

		ArrayList<ItemLoc> list = new ArrayList<ItemLoc>();

		String selectQuery = "SELECT * FROM " + dbHelper.TABLE_FITEMLOC + " WHERE " + dbHelper.FITEMLOC_LOC_CODE + " ='MS'";

		Cursor cursor = dB.rawQuery(selectQuery, null);
		while (cursor.moveToNext()) {

			ItemLoc itemLoc = new ItemLoc();

			itemLoc.setFITEMLOC_ID(cursor.getString(cursor.getColumnIndex(dbHelper.FITEMLOC_ID)));
			itemLoc.setFITEMLOC_ITEM_CODE(cursor.getString(cursor.getColumnIndex(dbHelper.FITEMLOC_ITEM_CODE)));
			itemLoc.setFITEMLOC_LOC_CODE(cursor.getString(cursor.getColumnIndex(dbHelper.FITEMLOC_LOC_CODE)));
			itemLoc.setFITEMLOC_QOH(cursor.getString(cursor.getColumnIndex(dbHelper.FITEMLOC_QOH)));
			

			list.add(itemLoc);

		}

		return list;
	}

	public int deleteAllItemLoc() {

		int count = 0;

		if (dB == null) {
			open();
		} else if (!dB.isOpen()) {
			open();
		}
		Cursor cursor = null;
		try {

			cursor = dB.rawQuery("SELECT * FROM " + dbHelper.TABLE_FITEMLOC, null);
			count = cursor.getCount();
			if (count > 0) {
				int success = dB.delete(dbHelper.TABLE_FITEMLOC, null, null);
				Log.v("Success", success + "");
			}
		} catch (Exception e) {

			Log.v(TAG + " Exception", e.toString());

		} finally {
			if (cursor != null) {
				cursor.close();
			}
			dB.close();
		}

		return count;

	}

	public String getAllitemloc(String Itemcode, String Loccode) {
		if (dB == null) {
			open();
		} else if (!dB.isOpen()) {
			open();
		}

		String list = null;

		@SuppressWarnings("static-access")
		String selectQuery = "select QOH from FItemLoc where Itemcode = '" + Itemcode + "' AND LocCode ='" + Loccode + "' ";

		Cursor cursor = dB.rawQuery(selectQuery, null);

		while (cursor.moveToNext()) {

			ItemLoc loc = new ItemLoc();

			// loc.setFITEMLOC_ITEM_CODE(cursor.getString(cursor.getColumnIndex(dbHelper.FITEMLOC_ITEM_CODE)));
			// loc.setFITEMLOC_LOC_CODE(cursor.getString(cursor.getColumnIndex(dbHelper.FITEMLOC_LOC_CODE)));
			loc.setFITEMLOC_QOH(cursor.getString(cursor.getColumnIndex(dbHelper.FITEMLOC_QOH)));

			list = cursor.getString(0);

		}

		return list;
	}

	@SuppressWarnings("static-access")
	public int AddnewRecord(ArrayList<ItemLoc> list) {

		int serverdbID = 0;
		int serverdbID1 = 0;

		if (dB == null) {
			open();
		} else if (!dB.isOpen()) {
			open();
		}
		Cursor cursor = null;

		try {

			for (ItemLoc loc : list) {

				ContentValues values = new ContentValues();
				ContentValues values1 = new ContentValues();

				// if(loc.getFITEMLOC_LOC_CODE().split("-:-")[0].toString().equals(loc.getFITEMLOC_LOC_CODE().split("-:-")[1].toString()))
				// {
				String selectQuery = "SELECT * FROM " + dbHelper.TABLE_FITEMLOC + " WHERE " + dbHelper.FITEMLOC_ITEM_CODE + " = '" + loc.getFITEMLOC_ITEM_CODE() + "' AND " + dbHelper.FITEMLOC_LOC_CODE + " = '" + loc.getFITEMLOC_LOC_CODE().split("-:-")[1].toString() + "'";

				cursor = dB.rawQuery(selectQuery, null);

				values.put(dbHelper.FITEMLOC_QOH, loc.getFITEMLOC_QOH().split("-:-")[0].toString());
				values.put(dbHelper.FITEMLOC_LOC_CODE, loc.getFITEMLOC_LOC_CODE().split("-:-")[0].toString());

				values1.put(dbHelper.FITEMLOC_QOH, loc.getFITEMLOC_QOH().split("-:-")[1].toString());
				values1.put(dbHelper.FITEMLOC_LOC_CODE, loc.getFITEMLOC_LOC_CODE().split("-:-")[1].toString());

				int count = cursor.getCount();
				if (count > 0) {
					serverdbID = dB.update(dbHelper.TABLE_FITEMLOC, values, dbHelper.FITEMLOC_ITEM_CODE + " = '" + loc.getFITEMLOC_ITEM_CODE() + "' " + " AND " + dbHelper.FITEMLOC_LOC_CODE + " ='" + loc.getFITEMLOC_LOC_CODE().split("-:-")[0].toString() + "'", null);
					serverdbID1 = dB.update(dbHelper.TABLE_FITEMLOC, values1, dbHelper.FITEMLOC_ITEM_CODE + " = '" + loc.getFITEMLOC_ITEM_CODE() + "' " + " AND " + dbHelper.FITEMLOC_LOC_CODE + " ='" + loc.getFITEMLOC_LOC_CODE().split("-:-")[1].toString() + "'", null);

				}

			}

			// }
		} catch (Exception e) {

			Log.v(TAG + " Exception", e.toString());

		} finally {
			if (cursor != null) {
				cursor.close();
			}
			dB.close();
		}
		return serverdbID;

	}
	
	/*Sales Return Stock Update 
	 * Adding Values to the Fitemloc Qty
	 */
	
	@SuppressWarnings("static-access")
	public int UpdateFinalQOHFromHedReturn(String qty, String itemcode, String LocCode) {

		int count = 0;

		if (dB == null) {
			open();
		} else if (!dB.isOpen()) {
			open();
		}
		Cursor cursor = null;
		Double OriginalVal = 0.0;

		try {

			String selectQuery = "SELECT * FROM " + dbHelper.TABLE_FITEMLOC + " WHERE " + dbHelper.FITEMLOC_ITEM_CODE + " = '" + itemcode + "' AND " + dbHelper.FITEMLOC_LOC_CODE + " = '" + LocCode + "' ";
			cursor = dB.rawQuery(selectQuery, null);
			
			while (cursor.moveToNext()) {
				
				//Double kk = cursor.getDouble(cursor.getColumnIndex(dbHelper.FITEMLOC_QOH));
				OriginalVal = cursor.getDouble(cursor.getColumnIndex(dbHelper.FITEMLOC_QOH)) + Double.parseDouble(qty);

			}

			ContentValues values = new ContentValues();
			
			System.out.println("OriginalVal:" + OriginalVal.toString());
			System.out.println("Loccode Org"+(cursor.getColumnIndex(dbHelper.FITEMLOC_QOH)));

			values.put(dbHelper.FITEMLOC_QOH, String.valueOf(OriginalVal));

			int cn = cursor.getCount();

			if (cn > 0) {
				count = dB.update(dbHelper.TABLE_FITEMLOC, values, dbHelper.FITEMLOC_LOC_CODE + " = '" + LocCode + "' AND " + dbHelper.FITEMLOC_ITEM_CODE + " = '" + itemcode + "'", null);
			} 
//			else {
//				values.put(dbHelper.FITEMLOC_QOH, qty);
//				count = (int) dB.insert(dbHelper.TABLE_FITEMLOC, null, values);
//			}

		} catch (Exception e) {

			Log.v(TAG + " Exception", e.toString());

		} finally {
			if (cursor != null) {
				cursor.close();
			}
			dB.close();
		}
		return count;

	}
	
	/* Sales return Delete FitemLoc Update.
	 * Deduction from fitemLoc
	 */

		@SuppressWarnings("static-access")
		public int UpdateFinalQOHFromDeleteReturn(String qty, String itemcode, String LocCode) {

			int count = 0;

			if (dB == null) {
				open();
			} else if (!dB.isOpen()) {
				open();
			}
			Cursor cursor = null;
			Double OriginalVal = 0.0;

			try {

				String selectQuery = "SELECT * FROM " + dbHelper.TABLE_FITEMLOC + " WHERE " + dbHelper.FITEMLOC_ITEM_CODE + " = '" + itemcode + "' AND " + dbHelper.FITEMLOC_LOC_CODE + " = '" + LocCode.toString() + "'";

				cursor = dB.rawQuery(selectQuery, null);
				while (cursor.moveToNext()) {
					
					Double kk = cursor.getDouble(cursor.getColumnIndex(dbHelper.FITEMLOC_QOH));
					System.out.println("fitemloc:" + kk.toString());
					OriginalVal = cursor.getDouble(cursor.getColumnIndex(dbHelper.FITEMLOC_QOH)) - Double.parseDouble(qty);

				}

				ContentValues values = new ContentValues();
				
				System.out.println("OrginalVal:" + OriginalVal.toString());

				values.put(dbHelper.FITEMLOC_QOH, String.valueOf(OriginalVal));

				int cn = cursor.getCount();

				if (cn > 0) {
					
					count = dB.update(dbHelper.TABLE_FITEMLOC, values, dbHelper.FITEMLOC_LOC_CODE + " = '" + LocCode + "' AND " + dbHelper.FITEMLOC_ITEM_CODE + " = '" + itemcode + "'", null);
					
				}
				// else{
				// values.put(dbHelper.FITEMLOC_QOH,qty);
				// count = (int) dB.insert(dbHelper.TABLE_FITEMLOC, null, values);
				// }

			} catch (Exception e) {

				Log.v(TAG + " Exception", e.toString());

			} finally {
				if (cursor != null) {
					cursor.close();
				}
				dB.close();
			}
			return count;

		}
		
		public String getProductQOH(String code, String loccode) {

			if (dB == null) {
				open();
			} else if (!dB.isOpen()) {
				open();
			}
			
			Cursor cursor = null;
			
			try {
			//String selectQuery = "SELECT SUM(QOH) AS 'QOH' FROM " + dbHelper.TABLE_FITEMLOC + " WHERE " + dbHelper.FITEMLOC_ITEM_CODE + "='" + code + "' GROUP BY "+ dbHelper.FITEMLOC_ITEM_CODE;
			String selectQuery = "SELECT SUM(QOH) AS 'QOH' FROM " + dbHelper.TABLE_FITEMLOC + " WHERE " + dbHelper.FITEMLOC_ITEM_CODE + "='" + code + "' AND "+ dbHelper.FITEMLOC_LOC_CODE + "='"+loccode+"' GROUP BY "+ dbHelper.FITEMLOC_ITEM_CODE;

			
			cursor = dB.rawQuery(selectQuery, null);

			while (cursor.moveToNext()) {

				return cursor.getString(cursor.getColumnIndex("QOH"));

			}
			
			} catch (Exception e) {

				Log.v(TAG + " Exception", e.toString());

			} finally {
				if (cursor != null) {
					cursor.close();
				}
				dB.close();
			}
			return "0";

		}

}
